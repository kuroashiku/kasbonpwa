{
  "version": 3,
  "sources": ["../../date-fns/fp/_lib/convertToFP.mjs", "../../date-fns/fp/set.mjs"],
  "sourcesContent": ["/**\n * Converts a function to a curried function that accepts arguments in reverse\n * order.\n *\n * @param fn - The function to convert to FP\n * @param arity - The arity of the function\n * @param curriedArgs - The curried arguments\n *\n * @returns FP version of the function\n *\n * @private\n */\nexport function convertToFP(fn, arity, curriedArgs = []) {\n  return curriedArgs.length >= arity\n    ? fn(...curriedArgs.slice(0, arity).reverse())\n    : (...args) => convertToFP(fn, arity, curriedArgs.concat(args));\n}\n", "// This file is generated automatically by `scripts/build/fp.ts`. Please, don't change it.\nimport { set as fn } from \"../set.mjs\";\nimport { convertToFP } from \"./_lib/convertToFP.mjs\";\n\nexport const set = convertToFP(fn, 2);\n\n// Fallback for modularized imports:\nexport default set;\n"],
  "mappings": ";;;;;;;AAYO,SAAS,YAAY,IAAI,OAAO,cAAc,CAAC,GAAG;AACvD,SAAO,YAAY,UAAU,QACzB,GAAG,GAAG,YAAY,MAAM,GAAG,KAAK,EAAE,QAAQ,CAAC,IAC3C,IAAI,SAAS,YAAY,IAAI,OAAO,YAAY,OAAO,IAAI,CAAC;AAClE;;;ACZO,IAAMA,OAAM,YAAY,KAAI,CAAC;AAGpC,IAAO,cAAQA;",
  "names": ["set"]
}
